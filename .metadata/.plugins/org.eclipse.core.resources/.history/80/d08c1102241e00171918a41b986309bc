#include "alighment.h"
__host__
void alignment_gpu(char* h_seq_a, char* h_seq_b, int seq_size)
{
    char* d_seq_a, d_seq_b, d_matrix;
    unsigned long int bytes = sizeof(int) * seq_size;
    unsigned long int matrix_bytes = sizeof(int) * (seq_size+1) * (seq_size+1);
    cudaMalloc((void**)d_seq_a, (size_t)bytes);
    cudaMalloc((void**)d_seq_b, (size_t)bytes);
    cudaMalloc((void**)d_matrix, (size_t)matrix_bytes);
	cudaMemcpy(d_seq_a, h_seq_a, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_seq_b, h_seq_b, bytes, cudaMemcpyHostToDevice);
    cudaMemset(d_matrix, '\0', matrix_bytes);
    
    
    //do the work
    for (int blocks = 1; blocks <= 4; blocks *= 2){//launch with 1, 2, or 4 blocks
        int block_size = 2048/blocks;
        if (seq_size < block_size){
            threads = seq_size;//assign jsut enough threads for each block
        }else{
            threads = 2048/blocks;//assign max threads
        }

        dim3 grid(blocks, 1 ,1);
        dim3 block(threads, 1, 1);
        

 		double time1 =  CPUtime();
 		int max_block_step = 2 * blocks -1;
        for (int block_step = 0; block_step < (2*blocks-1); block_step++){

			align<<< grid, block >>>(d_seq_a, d_seq_b, d_matrix, block_step, block_size);

        }
		double time2 = CPUtime();
		print("GPU reduction took %lu\n", time2-time1);
    }
    
    cudaFree((void*) d_seq_a);
    cudaFree((void*) d_seq_b);
    cudaFree((void*) d_matrix);
}

__device__
void align(char* seq_a, char* seq_b, char* matrix, int threads, int griddim){


    /****************
    grid size 1,2,4 largest antidiagonal length 1,2,4
    for each block step(1, 121, 1234321){
    	at each block step, let certain block work
    	for each thread step(0 to 2*blockwidth -1 ){
    		index = tid
    		while (index + numofthreads < stepsize){
    			matrix[index] = max( , , )
    			index += numofthreads
    		}
    	{
    }
     ****************/
    int tid = threadIdx.x;


}








